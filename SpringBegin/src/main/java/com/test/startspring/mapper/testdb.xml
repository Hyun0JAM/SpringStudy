<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== #17. mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<!-- ==== #18. 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다) ==== --> 
<mapper namespace="testdb">

   <insert id="mbtest1">
   	  insert into spring_mybatistest(no, name, email, tel, addr, writeday)
      values(seq_mybatistest.nextval, '홍길동'||seq_mybatistest.nextval, 'hongkd@gmail.com', '010-234-5678', '서울시 종로구 인사동', default)    
   </insert>
   
   
   <!-- DTO(VO)로 넘어온 값을 받아서 DB에 처리해주는 예제
        이때 조심해야할 일은 parameterType 에 VO 의 클래스명을 기재할때
        패키지명까지 모두 기술해주어야 한다.!!!!
    -->
   <insert id="mbtest3" parameterType="com.test.model.MybatisTestVO"> 
   	  insert into spring_mybatistest(no, name, email, tel, addr, writeday)
      values(seq_mybatistest.nextval, #{irum}, #{email}, #{tel}, #{addr}, default)
   </insert>
   
   
   <insert id="mbtest4" parameterType="com.test.model.MemberVO"> 
   	  insert into spring_mybatistest(no, name, email, tel, addr, writeday)
      values(seq_mybatistest.nextval, #{name}, #{email}, #{tel}, #{addr}, default)
   </insert>
   
   <insert id="mbtest5" parameterType="HashMap">
   	  insert into spring_mybatistest(no, name, email, tel, addr, writeday)
      values(seq_mybatistest.nextval, #{NAME}, #{EMAIL}, #{TEL}, #{ADDR}, default)
   </insert>
   
   
   <select id="mbtest6" parameterType="int" resultType="String" >
   	   select name 
   	   from spring_mybatistest
   	   where no = #{no}
   </select>
   
   
   <select id="mbtest7" parameterType="int" resultType="com.test.model.MemberVO">
       select no, name, email, tel, addr
		    , to_char(writeday, 'yyyy-mm-dd hh24:mi:ss') as writeday
	   from spring_mybatistest
	   where no = #{no}
   </select>
   
   <!-- 다중행 데이터를 조회하기
              조심할 것은 !!!!!
        resultType 에 List 이라는 타입은 없다.!!!!!
              대신에 리턴되는 결과물이 List<VO> 이라면 resultType 에  VO 만 적어주어야 한다.!!!!! -->
   <select id="mbtest8" parameterType="String" resultType="com.test.model.MemberVO">
	   select no, name, email, tel, addr
			, to_char(writeday, 'yyyy-mm-dd hh24:mi:ss') as writeday
	   from spring_mybatistest
	   where addr like '%'|| #{addr} ||'%'
	   order by no desc
   </select>
   
   
   <resultMap type="com.test.model.MemberVO2" id="dataResultMap">
   	  <result property="no2"       column="no"        javaType="int" />
   	  <result property="name2"     column="name"      javaType="String"/>
   	  <result property="email2"    column="email"     javaType="String"/>
   	  <result property="tel2" 	   column="tel"       javaType="String"/>
   	  <result property="addr2" 	   column="addr"      javaType="String"/>
   	  <result property="writeday2" column="writeday"  javaType="String"/>
   </resultMap>
   
   <select id="mbtest9" parameterType="String" resultMap="dataResultMap">
	   select no, name, email, tel, addr
			, to_char(writeday, 'yyyy-mm-dd hh24:mi:ss') as writeday
	   from spring_mybatistest
	   where addr like '%'|| #{addr} ||'%'
	   order by no desc
   </select>
   
   
   <select id="mbtest9_2" parameterType="String" resultType="com.test.model.MemberVO2">
	   select no AS no2, name AS name2, email AS email2, tel AS tel2, addr AS addr2
			, to_char(writeday, 'yyyy-mm-dd hh24:mi:ss') AS writeday2
	   from spring_mybatistest
	   where addr like '%'|| #{addr} ||'%'
	   order by no desc
   </select>
   
   
   <!-- ====== >>>> 중요 <<<< ===== 
	     HashMap 타입으로 매개변수를 받아온 것을 꺼내서 사용할때
	     1. 데이터로 사용할때는 #{key명} 이고,
	     2. myBatis 에서 제공하는 if 엘리먼트 안에서 사용할때는
	              그냥 그대로 <if test="key명"> 이렇게 사용한다.
	        if test="key명" 인데 key명은 HashMap의 키이다.
	     3. 식별자(테이블명, 컬럼명)로 사용할때는 ${key명} 이다.         
	--> 
   <resultMap type="HashMap" id="dataResultMap2">
   	  <result property="NO"        column="no"        javaType="String" />
   	  <result property="NAME"      column="name"      javaType="String"/>
   	  <result property="EMAIL"     column="email"     javaType="String"/>
   	  <result property="TEL" 	   column="tel"       javaType="String"/>
   	  <result property="ADDR" 	   column="addr"      javaType="String"/>
   	  <result property="WRITEDAY"  column="writeday"  javaType="String"/>
   	  <result property="BIRTHDAY"  column="birthday"  javaType="String"/>
   </resultMap>
   	
    <select id="mbtest10" parameterType="String" resultMap="dataResultMap2">
	   select no, name, email, tel, addr
			, to_char(writeday, 'yyyy-mm-dd hh24:mi:ss') AS writeday
			, nvl(birthday, ' ') AS birthday
	   from spring_mybatistest
	   where addr like '%'|| #{addr} ||'%'
	   order by no desc
    </select>
   
    <select id="mbtest11" parameterType="HashMap" resultMap="dataResultMap2">
	    select no, name, email, tel, addr
			, to_char(writeday, 'yyyy-mm-dd hh24:mi:ss') AS writeday
			, nvl(birthday, ' ') AS birthday
	    from spring_mybatistest
	    where ${COLNAME} like '%'||#{SEARCHWORD}||'%'
	    <if test="STARTDAY != null and ENDDAY !=null">
			to_char(writeday,'yyyy-mm-dd') <![CDATA[>=]]> #{STARTDAY} and to_char(writeday,'yyyy-mm-dd') <![CDATA[<=]]> #{ENDDAY}
	    </if>
    </select> 
	<!-- ====== >>>> 중요 <<<< ===== 
	     SQL구문에서 부등호 <  > 가 사용되는 경우이다.
	         그런데 SQL 쿼리문이 XML 파일에 기재되므로 부등호가 엘리먼트요소(태그)로
	         인식되지 않고 그냥 부등호로 인식되게 하려면  <![CDATA[부등호]]> 로 
	         사용해야 한다.
	-->
	<select id="mbtest12_deptno" resultType="Int">
		select distinct nvl(department_id,-9999) as department_id from hr.employees order by department_id
	</select>
	
	<resultMap type="HashMap" id="dataResultMap3">
		<result property="DEPARTMENT_ID" column="department_id" javaType="String" />
		<result property="DEPARTMENT_NAME" column="department_name" javaType="String" />
		<result property="EMPLOYEE_ID" column="employee_id" javaType="String" />
		<result property="JOB_ID" column="job_id" javaType="String" />
		<result property="NAME" column="name" javaType="String" />
		<result property="JUBUN" column="jubun" javaType="String" />
		<result property="GENDER" column="gender" javaType="String" />
		<result property="AGE" column="age" javaType="String" />
		<result property="YEARPAY" column="yearpay" javaType="String" />
	</resultMap>
	
	<select id="mbtest12" parameterType="HashMap" resultMap="dataResultMap3">
      select nvl(A.department_id,-9999) as department_id,department_name,employee_id,first_name||last_name as name, jubun,
            func_gender(jubun) as gender,func_age(jubun) as age,func_yearpay(employee_id) as yearpay
      from hr.departments A join hr.employees B on A.department_id = B.department_id 
      where 1=1
      <if test='DEPARTMENT_ID !=null and !"".equals(DEPARTMENT_ID)'>
         and nvl(A.department_id,-9999) = #{DEPARTMENT_ID} 
      </if>
      <choose>
         <when test='GENDER != null and "남".equals(GENDER)'>
            and func_gender(jubun) = '남'
         </when>
         <when test='GENDER != null and "여".equals(GENDER)'>
            and func_gender(jubun) = '여'
         </when>
         <otherwise>
            and jubun is not null
         </otherwise>
      </choose>
      order by A.department_id
   </select>
   
	<select id="mbtest13" parameterType="String" resultMap="dataResultMap2">
		select no, name, email, tel, addr
			, to_char(writeday, 'yyyy-mm-dd hh24:mi:ss') AS writeday
			, nvl(birthday, ' ') AS birthday
	   from spring_mybatistest
	   where addr like '%'|| #{addr} ||'%'
	   order by no desc
	</select>
	
	<select id="mbtest14" parameterType="HashMap" resultMap="dataResultMap3">
		select nvl(D.department_id,-9999) as department_id,department_name,employee_id,first_name||last_name as name, jubun,
               func_gender(jubun) as gender,func_age(jubun) as age,func_yearpay(employee_id) as yearpay
	   from hr.employees E join hr.departments D on E.department_id = D.department_id
	   where 1=1
	   <if test='DEPTNOARR != null and DEPTNOARR[0] !=""'>
	   		and nvl(D.department_id,-99) in
	   		<foreach collection="DEPTNOARR" index="i" open="(" separator="," close=")">
	   			${DEPTNOARR[i]}
	   		</foreach>
	   </if>
	   <if test='GENDER != null and !"".equals(GENDER)'>
	   		and func_gender(jubun) = #{GENDER}
	   </if>
	   <if test='AGELINE != null and !"".equals(AGELINE)'>
	   		and trunc(func_age(jubun),-1) = #{AGELINE}
	   </if>
	   order by yearpay desc
	</select>
	
	<resultMap type="HashMap" id="genderMap">
		<result property="GENDER" column="gender" javaType="String" />
		<result property="CNT" column="cnt" javaType="int" />
		<result property="PERCENTAGE" column="percentage" javaType="int" />
	</resultMap>
	<select id="mbtest15_gender" resultMap="genderMap">
		select func_gender(jubun) as gender, count(*) as cnt, round(count(*)/(select count(*)from hr.employees)*100,1) as percentage
		from hr.employees
		group by func_gender(jubun)
	</select>

	<resultMap type="HashMap" id="agelineMap">
		<result property="AGELINE" column="ageline" javaType="String" />
		<result property="CNT" column="cnt" javaType="int" />
	</resultMap>
	<select id="mbtest15_ageline" resultMap="agelineMap">
		select decode(trunc(func_age(jubun),-1),0,'10대미만',trunc(func_age(jubun),-1)||'대') as ageline, count(*) as cnt
		from hr.employees
		group by trunc(func_age(jubun),-1)
		order by trunc(func_age(jubun),-1)
	</select>
	<resultMap type="HashMap" id="deptnoMap">
		<result property="DEPTNO" column="deptno" javaType="String" />
		<result property="DEPARTMENT_NAME" column="department_name" javaType="String" />
		<result property="CNT" column="cnt" javaType="String" />
		<result property="AVGYEARPAY" column="avgyearpay" javaType="String" />
	</resultMap>
	<select id="mbtest15_deptno" resultMap="deptnoMap">
		select nvl(department_id,0) as deptno, count(*) as cnt, trunc(avg(func_yearpay(employee_id))) as avgyearpay,department_name
		from hr.employees E join hr.departments D on E.department_id = D.department_id
		group by E.department_id
		order by E.department_id
	</select>
	<select id="mbtest15_emp" parameterType="String" resultMap="dataResultMap3">
		select func_yearpay(employee_id) as YEARPAY,employee_id 
		from hr.employees 
		where department_id = #{deptno}
	</select>
   <!-- EX DIY 예제 -->
	
	<select id="ex01" parameterType="String" resultType="Int">
		select sysdate - to_date(#{date}) from dual
	</select>
	<select id="ex02" resultType="String">
		select distinct job_id from hr.employees
	</select>
	
	<select id="ex02JSON" parameterType="String" resultMap="dataResultMap3">
		select nvl(department_id,-9999) as department_id,employee_id,first_name||last_name as name, jubun,job_id,
            func_gender(jubun) as gender,func_age(jubun) as age,func_yearpay(employee_id) as yearpay
		from hr.employees 
		where 1=1
		<if test='_parameter != null and !"".equals(_parameter)'>
			and job_id = #{_parameter}
		</if>
	</select>
</mapper>


